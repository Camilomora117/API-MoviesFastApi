### Module config

# dabatase.py
import os
from sqlalchemy import create_engine
from sqlalchemy.orm.session import sessionmaker
from sqlalchemy.ext.declarative import declarative_base

sqlite_file_name = "../database.sqlite"
base_dir = os.path.dirname(os.path.realpath(__file__))

database_url = f"sqlite:///{os.path.join(base_dir, sqlite_file_name)}"

engine = create_engine(database_url, echo=True)

Session = sessionmaker(bind=engine)
Base = declarative_base()


### Module middlewares

## error_handler.py
from starlette.middleware.base import BaseHTTPMiddleware
from fastapi import FastAPI, Request, Response
from fastapi.responses import JSONResponse

class ErrorHandler(BaseHTTPMiddleware):
    def __init__(self, app: FastAPI) -> None:
        super().__init__(app)

    async def dispatch(self, request: Request, call_next) -> Response | JSONResponse:
        try:
            return await call_next(request)
        except Exception as e:
            return JSONResponse(status_code=500, content={'error': str(e)})

## jwt_bearer.py
from fastapi.security import HTTPBearer
from fastapi import Request, HTTPException
from utils.jwt_manager import validate_token
from schemas.user import User
from services.user import UserService
from config.dabatase import Session

class JWTBearer(HTTPBearer):
    async def __call__(self, request: Request):
        auth = await super().__call__(request)
        data = validate_token(auth.credentials)
        db = Session()
        result = UserService(db).authenticate_user(User(**data))
        if not result:
            raise HTTPException(status_code=403, detail="Credenciales son invalidas")

### Models

## user.py
from config.dabatase import Base
from sqlalchemy import Column, Integer, String
from sqlalchemy.orm import relationship

class User(Base):

    __tablename__ = "users"

    id = Column(Integer, primary_key= True)
    username = Column(String, unique=True)
    password = Column(String)
    email = Column(String, unique=True)

## movie.py
from config.dabatase import Base
from sqlalchemy import Column, Integer, String, Float
from sqlalchemy.orm import relationship

class Movie(Base):

    __tablename__ = "movies"

    id = Column(Integer, primary_key= True)
    title = Column(String)
    overview = Column(String)
    year = Column(Integer)
    rating = Column(Float)
    category = Column(String)

## order.py
from config.dabatase import Base
from sqlalchemy import Column, Integer, String, Float, Date
from sqlalchemy import ForeignKey
from sqlalchemy.orm import relationship
from sqlalchemy.orm import declared_attr

class Order(Base):

    __tablename__ = "orders"

    id = Column(Integer, primary_key=True)
    date_created = Column(Date)
    user_id = Column(Integer, ForeignKey('users.id', ondelete="CASCADE"), nullable=False)

    user = relationship('User', backref='users')


class OrderMovie(Base):

    __tablename__ = "order_movies"

    order_id = Column(Integer, ForeignKey('orders.id', ondelete="CASCADE"), primary_key=True)
    movie_id = Column(Integer, ForeignKey('movies.id', ondelete="CASCADE"), primary_key=True)
    quantity = Column(Integer)

    order = relationship('Order', backref='orders')
    movie = relationship('Movie', backref='movies')

    @declared_attr
    def __mapper_args__(cls):
        return {
            'primary_key': (cls.order_id, cls.movie_id),
            'concrete': True
        }


### Routers

## user.py
from fastapi import Body, status, Path, Depends
from fastapi.responses import JSONResponse
from fastapi import APIRouter
from fastapi.encoders import jsonable_encoder
from fastapi import HTTPException

from schemas.user import User, UserLogin, UserSingUp
from services.user import UserService
from middlewares.jwt_bearer import JWTBearer
from utils.jwt_manager import get_password_hash
from utils.jwt_manager import create_token
from config.dabatase import Session

user_router = APIRouter()

@user_router.post(
          path="/login", 
          status_code=status.HTTP_200_OK,
          tags=["users"],
          summary="Login user in the app",
          response_model=dict)
def login(user: UserLogin = Body(...)):
     db = Session()
     result = UserService(db).authenticate_user(user)
     if result:
        token: str = create_token(user.dict())
        return JSONResponse(status_code=status.HTTP_200_OK, content=token)

@user_router.post(
        path="/signup",
        response_model=UserLogin,
        tags=["users"],
        status_code=status.HTTP_201_CREATED,
        summary="Create new User")
def signup(user: User = Body(...)):
      db = Session()
      existing_user = UserService(db).get_user_by_username(user.username)
      if existing_user:
        raise HTTPException(status_code=status.HTTP_400_BAD_REQUEST, detail="User already exists")
      hashed_password = get_password_hash(user.password)
      user.password = hashed_password
      result = UserService(db).create_user(user)
      signup_user = UserSingUp(username=result.username, email=result.email)
      return JSONResponse(status_code=status.HTTP_201_CREATED, content=jsonable_encoder(signup_user))

@user_router.delete(
        path='/users/{id_user}',
        tags=['users'], 
        response_model=dict, 
        status_code=status.HTTP_200_OK,
        summary="Delete User",
        dependencies=[Depends(JWTBearer())])
def delete_user(id_user: int = Path(...)):
    db = Session()
    user = UserService(db).get_user_by_Id(id_user)
    if user is None:
        raise HTTPException(status_code=status.HTTP_404_NOT_FOUND, detail="User not found")
    UserService(db).delete_user(id_user)
    return JSONResponse(status_code=status.HTTP_200_OK, content={"message": "User removed"})

@user_router.put(
        path='/users/{id_user}', 
        tags=['users'], 
        response_model=dict, 
        status_code=status.HTTP_200_OK,
        summary="Update data User",
        dependencies=[Depends(JWTBearer())])
def update_user(id_user: int = Path(...), user: User = Body(...)):
    db = Session()
    result = UserService(db).get_user_by_Id(id_user)
    if not result:
        raise HTTPException(status_code=status.HTTP_404_NOT_FOUND, detail="User not found")
    UserService(db).update_user(id_user, user)
    return JSONResponse(status_code=status.HTTP_200_OK, content={"message": "Modified User"})


## movie.py
from fastapi import APIRouter
from fastapi import Depends, Path, Body, status, HTTPException
from fastapi.responses import JSONResponse
from fastapi.encoders import jsonable_encoder

from typing import List
from models.movie import Movie as MovieModel
from schemas.movie import Movie
from services.movie import MovieService
from middlewares.jwt_bearer import JWTBearer
from config.dabatase import Session

movie_router = APIRouter()

@movie_router.get(
        path='/movies', tags=['movies'], 
        response_model=List[Movie], 
        status_code=status.HTTP_200_OK, 
        summary="Get All Movies",
        dependencies=[Depends(JWTBearer())])
def get_movies():
    db = Session()
    result = MovieService(db).get_movies()
    return JSONResponse(status_code=status.HTTP_200_OK, content=jsonable_encoder(result))

@movie_router.get(
        path='/movies/{id}', 
        tags=['movies'], 
        response_model=Movie,
        status_code=status.HTTP_200_OK,
        summary="Get movie by id",
        dependencies=[Depends(JWTBearer())])
def get_movie_by_id(id: int = Path(...)):
    db = Session()
    result = MovieService(db).get_movie(id)
    if not result:
         raise HTTPException(status_code=status.HTTP_404_NOT_FOUND, detail="Movie not found")
    return JSONResponse(status_code=status.HTTP_200_OK, content=jsonable_encoder(result))

@movie_router.get(
        path='/movies/category/{category}', 
        tags=['movies'], 
        response_model=List[Movie],
        status_code=status.HTTP_200_OK,
        summary="Get movies by category",
        dependencies=[Depends(JWTBearer())])
def get_movies_by_category(category: str = Path(..., min_length=5, max_length=15)):
    db = Session()
    result = MovieService(db).get_movies_by_category(category)
    if not result:
         raise HTTPException(status_code=status.HTTP_404_NOT_FOUND, detail="Category not found")
    return JSONResponse(status_code=status.HTTP_200_OK, content=jsonable_encoder(result))

@movie_router.post(
        path='/movies', 
        tags=['movies'], 
        response_model=dict, 
        status_code=status.HTTP_201_CREATED,
        summary="Create a new Movie",
        dependencies=[Depends(JWTBearer())])
def create_movie(movie: Movie):
    db = Session()
    MovieService(db).create_movie(movie)    
    return JSONResponse(status_code=status.HTTP_201_CREATED, content={"message": "Se ha registrado la pel√≠cula"})

@movie_router.put(
        path='/movies/{id}', 
        tags=['movies'], 
        response_model=dict, 
        status_code=status.HTTP_200_OK,
        summary="Update a movie",
        dependencies=[Depends(JWTBearer())])
def update_movie(id: int = Path(...), movie: Movie = Body(...)):
    db = Session()
    result = MovieService(db).get_movie(id)
    if not result:
         raise HTTPException(status_code=status.HTTP_404_NOT_FOUND, detail="Movie not found")
    MovieService(db).update_movie(id, movie)
    return JSONResponse(status_code=status.HTTP_200_OK, content={"message": "Modified movie"})

@movie_router.delete(
        path='/movies/{id}', 
        tags=['movies'], 
        response_model=dict, 
        status_code=status.HTTP_200_OK,
        summary="Delete a movie",
        dependencies=[Depends(JWTBearer())])
def delete_movie(id: int = Path(...)):

### schemas

## user.py
from pydantic import BaseModel, Field, EmailStr

class User(BaseModel):
    username: str = Field(...)
    password:str = Field(..., min_length=5)
    email:str = EmailStr(...)

class UserLogin(BaseModel):
    username: str = Field(..., example="camilo")
    password:str = Field(..., min_length=5, example="12345")

class UserSingUp(BaseModel):
    username: str = Field(...)
    email:str = EmailStr(...)

## movie.py
from pydantic import BaseModel, Field

class BaseMovie(BaseModel):
    title: str = Field(min_length=5, max_length=15, example="Mi pel√≠cula")
    overview: str = Field(min_length=15, max_length=50, example="Descripci√≥n de la pel√≠cula")
    year: int = Field(le=2022, example=2022)
    rating:float = Field(ge=1, le=10, example=9.8)
    category:str = Field(min_length=5, max_length=15, example="Acci√≥n")

class Movie(BaseMovie):
    pass

class MovieCreated(BaseMovie):
    id: int = Field(..., example="1")
    quantity:int = Field(...,ge=1,example="1")

## order.py
from datetime import datetime
from pydantic import BaseModel, Field

class Order(BaseModel):
    date_created: datetime = Field(default=datetime.now())
    user_id: int = Field(..., example="1")

class OrderMovie(BaseModel):
    order_id: int = Field(..., example="1")
    movie_id: int = Field(..., example="1")
    quantity: int = Field(..., example="1")

### services

## user.py
from schemas.user import User
from models.user import User as UserModel
from utils.jwt_manager import verify_password

class UserService():
    
    def __init__(self, db) -> None:
        self.db = db

    def authenticate_user(self, user: User):
        result = self.db.query(UserModel).filter(UserModel.username == user.username).first()
        if not result:
            return False
        if not verify_password(user.password, result.password):
            return False
        return True
    
    def get_user_by_Id(self, id):
        result = self.db.query(UserModel).filter(UserModel.id == id).first()
        return result
    
    def get_user_by_username(self, username):
        result = self.db.query(UserModel).filter(UserModel.username == username).first()
        return result

    def create_user(self, user: User):
        new_user = UserModel(**user.dict())
        self.db.add(new_user)
        self.db.commit()
        return new_user
    
    def delete_user(self, id: int):
       self.db.query(UserModel).filter(UserModel.id == id).delete()
       self.db.commit()
       return
    
    def update_user(self, id: int, data: User):
        user = self.db.query(UserModel).filter(UserModel.id == id).first()
        user.username = data.username
        user.email = data.email
        self.db.commit()
        return
    
    def delete_user_by_email(self, email: str):
       self.db.query(UserModel).filter(UserModel.email == email).delete()
       self.db.commit()
       return

## movie.py
from models.movie import Movie as MovieModel
from schemas.movie import Movie

class MovieService():
    
    def __init__(self, db) -> None:
        self.db = db

    def get_movies(self):
        result = self.db.query(MovieModel).all()
        print(result)
        return result

    def get_movie(self, id):
        result = self.db.query(MovieModel).filter(MovieModel.id == id).first()
        return result

    def get_movies_by_category(self, category):
        result = self.db.query(MovieModel).filter(MovieModel.category == category).all()
        return result

    def create_movie(self, movie: Movie):
        new_movie = MovieModel(**movie.dict())
        self.db.add(new_movie)
        self.db.commit()
        return new_movie

    def update_movie(self, id: int, data: Movie):
        movie = self.db.query(MovieModel).filter(MovieModel.id == id).first()
        movie.title = data.title
        movie.overview = data.overview
        movie.year = data.year
        movie.rating = data.rating
        movie.category = data.category
        self.db.commit()
        return
    
    def delete_movie(self, id: int):
       self.db.query(MovieModel).filter(MovieModel.id == id).delete()
       self.db.commit()
       return

### utils

## jwt_manager.py
from jwt import encode, decode
from passlib.context import CryptContext

def create_token(data: dict):
    token: str = encode(payload=data, key="my_secret_key", algorithm="HS256")
    return token

def validate_token(token: str):
    data: dict = decode(token, key="my_secret_key", algorithms=['HS256'])
    return data

def get_password_hash(password):
    pwd_context = CryptContext(schemes=["bcrypt"], deprecated="auto")
    return pwd_context.hash(password)

def verify_password(plain_password, hashed_password):
    pwd_context = CryptContext(schemes=["bcrypt"], deprecated="auto")
    return pwd_context.verify(plain_password, hashed_password)

### test

## test_user.py
from fastapi.testclient import TestClient
from security import app
from fastapi import status
from schemas.user import UserSingUp
from config.dabatase import Session
from services.user import UserService
import pytest
from utils.jwt_manager import create_token

credentials = {"username": "prueba", "password": "prueba", "email": "prueba@gmail.com"}

def get_token():
    token = create_token(credentials)
    return token

@pytest.fixture(scope="module")
def test_client():
    client = TestClient(app)
    yield client
    db = Session()
    UserService(db).delete_user_by_email("prueba@gmail.com")

@pytest.fixture(scope="module")
def test_user():
    return credentials
    
def test_signup_create_user(test_client, test_user):
    response = test_client.post("/signup", json=test_user)
    signup_user = UserSingUp(username=test_user["username"], email=test_user["email"])
    assert response.status_code == status.HTTP_201_CREATED
    assert response.json() == signup_user

def test_signup_user_already_exists(test_client, test_user):
    response = test_client.post("/signup", json=test_user)
    assert response.status_code == status.HTTP_400_BAD_REQUEST
    assert response.json() == {"detail": "User already exists"}

def test_login_user(test_client, test_user):
    data = {"username": test_user["username"], "password":test_user["password"]}
    response = test_client.post("/login", json=data)
    assert response.status_code == status.HTTP_200_OK

def test_delete_user_not_found(test_client):
    token = get_token()
    headers = {
        "Authorization": f"Bearer {token}"
    }
    response = test_client.delete("/users/2000", headers=headers)
    assert response.status_code == status.HTTP_404_NOT_FOUND
    assert response.json() == {"detail": "User not found"}

def test_update_user_not_found(test_client, test_user):
    token = get_token()
    headers = {
        "Authorization": f"Bearer {token}"
    }
    response = test_client.put("/users/2000", json=test_user, headers=headers)
    assert response.status_code == status.HTTP_404_NOT_FOUND
    assert response.json() == {"detail": "User not found"}

def test_delete_access_forbidden(test_client):
    response = test_client.delete("/users/2000")
    assert response.status_code == status.HTTP_403_FORBIDDEN

def test_update_access_forbidden(test_client, test_user):
    response = test_client.put("/users/2000", json=test_user)
    assert response.status_code == status.HTTP_403_FORBIDDEN


## test_movie.py
from fastapi.testclient import TestClient
from security import app
from fastapi import status
from schemas.user import UserSingUp
from config.dabatase import Session
from services.user import UserService
import pytest
from utils.jwt_manager import create_token

credentials = {"username": "prueba", "password": "prueba", "email": "prueba@gmail.com"}

movie = {
        "title": "Test Pelicula",
        "overview": "Descripci√≥n de la pel√≠cula",
        "year": 2022,
        "rating": 9.8,
        "category": "CategoryTest"
        }

id_movie_global = 0

def get_token():
    token = create_token(credentials)
    return token

@pytest.fixture(scope="module")
def test_client():
    client = TestClient(app)
    yield client
    db = Session()
    UserService(db).delete_user_by_email("prueba@gmail.com")

@pytest.fixture(scope="module")
def test_user():
    return credentials

@pytest.fixture(scope="module")
def test_movie():
    return movie

def test_create_test_for_tests(test_client, test_user):
    test_client.post("/signup", json=test_user)

def test_create_movie_successfully(test_client, test_movie):
    token = get_token()
    headers = {
        "Authorization": f"Bearer {token}"
    }
    response = test_client.post("/movies", json=test_movie,headers=headers)
    assert response.status_code == status.HTTP_201_CREATED
    assert response.json() == {"message": "Se ha registrado la pel√≠cula"}

def test_get_movies_status_code(test_client):
    token = get_token()
    headers = {
        "Authorization": f"Bearer {token}"
    }
    response = test_client.get("/movies", headers=headers)
    global id_movie_global
    id_movie_global = int(response.json()[-1]['id'])
    assert response.status_code == status.HTTP_200_OK

def test_update_movie_not_found(test_client, test_movie):
    token = get_token()
    headers = {
        "Authorization": f"Bearer {token}"
    }
    response = test_client.put("/movies/1000", headers=headers, json=test_movie)
    assert response.status_code == status.HTTP_404_NOT_FOUND
    assert response.json() == {"detail": "Movie not found"}

def test_update_movie_successfully(test_client, test_movie):
    token = get_token()
    headers = {
        "Authorization": f"Bearer {token}"
    }
    response = test_client.put("/movies/" + str(id_movie_global), headers=headers, json=test_movie)
    assert response.status_code == status.HTTP_200_OK
    assert response.json() == {"message": "Modified movie"}

def test_get_movie_by_id_successfully(test_client, test_movie):
    token = get_token()
    headers = {
        "Authorization": f"Bearer {token}"
    }
    response = test_client.get("/movies/" + str(id_movie_global), headers=headers)
    assert response.status_code == status.HTTP_200_OK
    assert response.json()["title"] == test_movie["title"]
    assert response.json()["overview"] == test_movie["overview"]
    assert response.json()["year"] == test_movie["year"]
    assert response.json()["rating"] == test_movie["rating"]
    assert response.json()["category"] == test_movie["category"]

def test_get_movie_by_category_successfully(test_client, test_movie):
    token = get_token()
    headers = {
        "Authorization": f"Bearer {token}"
    }
    response = test_client.get("/movies/category/" + test_movie["category"], headers=headers)
    assert response.status_code == status.HTTP_200_OK
    assert response.json()[0]["title"] == test_movie["title"]
    assert response.json()[0]["overview"] == test_movie["overview"]
    assert response.json()[0]["year"] == test_movie["year"]
    assert response.json()[0]["rating"] == test_movie["rating"]
    assert response.json()[0]["category"] == test_movie["category"]

def test_get_movie_by_id_not_found(test_client):
    token = get_token()
    headers = {
        "Authorization": f"Bearer {token}"
    }
    response = test_client.get("/movies/1000", headers=headers)
    assert response.status_code == status.HTTP_404_NOT_FOUND
    assert response.json() == {"detail": "Movie not found"}

def test_delete_movie_successfully(test_client):
    token = get_token()
    headers = {
        "Authorization": f"Bearer {token}"
    }
    response = test_client.delete("/movies/" + str(id_movie_global), headers=headers)
    assert response.status_code == status.HTTP_200_OK
    assert response.json() == {"message": "Movie removed"}

def test_delete_movie_not_found(test_client):
    token = get_token()
    headers = {
        "Authorization": f"Bearer {token}"
    }
    response = test_client.delete("/movies/1000", headers=headers)
    assert response.status_code == status.HTTP_404_NOT_FOUND
    assert response.json() == {"detail": "Movie not found"}


### CONSULTAS

Consulta para usuarios no repetidos.
SELECT COUNT(DISTINCT u.id)
FROM mdl_user u
JOIN mdl_role_assignments ra ON u.id = ra.userid
JOIN mdl_role r ON r.id = ra.roleid AND r.name = 'profesor'
JOIN course_rel_user cru ON u.id = cru.userid
JOIN mdl_course c ON c.id = cru.course_id
JOIN centro_musical cm ON cm.centro_id = c.centro_id AND cm.nombre = 'Pereira';

Consulta teniendo en cuenta que curso 3 es el curso con id=3 y firstaccess es de tipo Date.
SELECT u.id, u.firstaccess
FROM mdl_user u
JOIN mdl_role_assignments ra ON ra.userid = u.id
JOIN mdl_role r ON r.id = ra.roleid AND r.name = 'estudiante'
JOIN course_rel_user cru ON cru.userid = u.id
JOIN mdl_course c ON c.id = cru.course_id AND c.id = 3
WHERE u.firstaccess > '2021-05-10'